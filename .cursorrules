{
  "rules": {
    "project": {
      "name": "semantic-build-optimizer",
      "type": "build-tools",
      "framework": "agnostic",
      "language": "JavaScript",
      "styling": "none",
      "description": "A suite of build tools for applying Semantic Stripping—AST-level identifier optimization—to React and React Native projects at the source level, before bundling. Comprises a core minifier, bundler plugins, and development tooling."
    },
    "codeStyle": {
      "formatting": {
        "indentation": "2 spaces",
        "semicolons": true,
        "quotes": "single",
        "trailingComma": "es5",
        "lineLength": 100
      },
      "namingConventions": {
        "packages": "kebab-case",
        "plugins": "kebab-case",
        "functions": "camelCase",
        "variables": "camelCase",
        "constants": "UPPER_SNAKE_CASE",
        "files": "kebab-case"
      },
      "eslint": {
        "extends": ["eslint:recommended"],
        "rules": {
          "no-unused-vars": "warn",
          "prefer-const": "error"
        }
      }
    },
    "dependencies": {
      "core": {
        "@babel/parser": {
          "version": "^7.24.7",
          "usage": "Parse source code into an AST for analysis.",
          "examples": [
            "const ast = parser.parse(code, { sourceType: 'module', plugins: ['jsx', 'typescript'] });"
          ]
        },
        "@babel/traverse": {
          "version": "^7.24.7",
          "usage": "Traverse the AST to identify and categorize safe-to-rename identifiers.",
          "examples": [
            "traverse(ast, { Identifier(path) { /* analysis logic */ } });"
          ]
        },
        "@babel/generator": {
          "version": "^7.24.7",
          "usage": "Generate optimized code from the modified AST.",
          "examples": [
            "const { code } = generate(ast, { minified: true, compact: true });"
          ]
        },
        "@babel/types": {
          "version": "^7.24.7",
          "usage": "Build and modify AST nodes safely.",
          "examples": [
            "if (t.isIdentifier(path.node)) { /* ... */ }"
          ]
        }
      },
      "metroPlugin": {
        "@expo/metro-config": {
          "version": "^0.17.4",
          "usage": "Base configuration for integrating with Expo's Metro bundler.",
          "examples": [
            "const { getDefaultConfig } = require('@expo/metro-config');"
          ]
        }
      },
      "devTool": {
        "express": {
          "version": "^4.19.2",
          "usage": "Lightweight server for the error translation API.",
          "examples": [
            "app.post('/translate', (req, res) => { /* use manifest to map names */ });"
          ]
        },
        "chalk": {
          "version": "^4.1.2",
          "usage": "Colorful terminal output for the CLI and dev server.",
          "examples": [
            "console.log(chalk.green('✅ Optimization successful!'));"
          ]
        }
      }
    },
    "fileStructure": {
      "root": {
        "packages": {
          "semantic-minifier-core": {
            "src": {
              "index.js": "Main entry point. Exports `minifySource(code, filePath)` function.",
              "analyzer.js": "AST analysis logic: finds safe-to-rename identifiers.",
              "optimizer.js": "AST transformation logic: performs the renaming.",
              "utils.js": "Helper functions for AST manipulation and scope tracking."
            },
            "package.json": "Config for the core library."
          },
          "metro-plugin-semantic-minification": {
            "src": {
              "index.js": "Main Metro plugin factory function."
            },
            "package.json": "Config for the Metro plugin."
          },
          "optimization-devtool": {
            "src": {
              "index.js": "Main entry point for the Express dev server.",
              "manifest-loader.js": "Logic for loading and querying the optimization manifest."
            },
            "package.json": "Config for the dev server."
          }
        },
        "examples": {
          "expo-demo": "A sample Expo app to test the plugin.",
          "nextjs-demo": "A sample Next.js app to test the plugin."
        }
      }
    },
    "bundleOptimization": {
      "semanticStripping": {
        "approach": "pre-bundler",
        "description": "Apply semantic stripping to source files during the bundler's transformation phase. This is semantically correct and safe.",
        "corePrinciple": "AGGRESSIVELY rename local, non-exported identifiers. NEVER rename exported/imported identifiers or properties that are part of a public API.",
        "outputs": [
          "Optimized source code passed to the bundler.",
          "A comprehensive `optimization-manifest.json` for development tooling."
        ]
      },
      "integration": {
        "metro": "The Metro plugin must hook into the `transformer` phase.",
        "webpack": "The Webpack plugin must hook into the build process."
      },
      "errorTranslation": {
        "purpose": "For development only. Uses the manifest to translate mangled stack traces back to original names.",
        "script": "optimization-devtool",
        "functionality": [
          "Loads `optimization-manifest.json`.",
          "Provides POST /translate endpoint.",
          "Runs concurrently with `expo start` or `next dev`."
        ]
      }
    },
    "development": {
      "scripts": {
        "build:core": "npm run build --workspace=packages/semantic-minifier-core",
        "build:metro": "npm run build --workspace=packages/metro-plugin-semantic-minification",
        "test:expo": "npm start --workspace=examples/expo-demo",
        "test:next": "npm run dev --workspace=examples/nextjs-demo",
        "measure": "node scripts/measure-bundle.js"
      },
      "notes": [
        "The system is designed for integration, not overwrite.",
        "The manifest is for debugging and is not shipped to production.",
        "Always compare bundle size and performance against standard Terser minification to prove value."
      ]
    },
    "constraints": {
      "semanticCorrectness": "MUST be maintained. Never break public APIs.",
      "scopeAwareness": "Transformation must be aware of function and module scope.",
      "noGlobalPollution": "Hoisting logic must not cause variable name conflicts.",
      "productionReady": "The goal is to create a robust, testable system, not just a PoC."
    }
  }
}